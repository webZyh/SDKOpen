项目进度
> web端框架搭建，路由搭建                      √
> server端框架搭建                             √
> 数据库连接、数据字典、新建数据               √
> 注册接口，功能                               √
> 登录接口，功能，vuex管理登录状态，           √
> 退出样式、接口、功能，登录时的loading状态    √
> 设置localStorage过期时间                     √
> 首页banner数据、接口                         √
> 首页轮播图，swiper                           √
> 文档页面的树形结构                           √     弃用el-tree/el-menu
> 文档对应menu创建页面以及路由配置             √
> 文档左侧menu的实现、文档menu数据mock         √
> better-scroll实现文档左侧的滚动条            √
> 将localStorage记录用户数据更改为后台控制，后台提供接口√    相关文件Login、App、Header
> 文档页面的搜索功能
> 新增一个表格页,写一个表格Demo，包挂日期选择、select选择、表格内容、分页等  √
> 表格页中根据条件查询，显示新的表格内容
> 管理中心左边菜单的伸缩功能、伸缩动画、内容较多时的滚动条
> 管理中心的权限控制、动态路由渲染
> 引入echart，制作图表                         √
> 中英文切换                                   √
-----------------------------------------------------------------------------------
1、解决使用路由拦截时，el-menu的active不跳转到需要跳转的菜单处，加上:router="true"

2、vuex
  component -> actions
  方式1/  mounted(){
        this.$store.dispatch('method',参数)
      }
  方式2/  import {mapActions} from 'vuex'
      methods:{
        ...mapActions(['method'])
      }
      mounted(){
        this.method()
      }

    actions ->  mutations
    method({commit , state}){
      ....
      commit(Method,{参数})   //这一步也可以直接从component到mutations
    }

    mutations
      Method(state,{参数}){
        //操作state
      }

    获取state方式
     1、import {mapState} from 'vuex'

        computed:{
          ...mapState(['stateName']),

          ...mapState({
                "stateName": state => state.子模块名.stateName    //有modules
              })
        }
        //stateName可以直接使用

     2、computed: {
          stateName () {
              return this.$store.state.stateName

              return this.$store.state.子模块名.stateName    //有modules
          }
        }

     获取getters方法

     1、import {mapGetters} from 'vuex';

        computed:{
          ...mapGetters(['gettersName'])
        }
        gettersName

        gettersName () {
            return this.$store.getters.gettersName
        }

      ********************
      子模块中设置了  namespaced: true,
      用以区分不同的子模块，调用子模块里的东西需要带上子模块的名字,如：this.$store.dispatch("common/getBannerData")
      ********************

      vuex modules查找规则，例如提交一个action
      如果子模块中 没有设置 namespaced: true, 先在最外面的action中查找，没找到 再去子模块中的action中查找
      如果子模块中 设置了   namespaced: true, 最外面的直接调用，如果外面没有，在子模块中需要加上子模块的名字调用this.$store.dispatch("common/getBannerData")，否则会报错

      ********************

3、axios
------------------------------------
axios.get('接口地址',{
	params:{
		传参
	},
	headers:{
		携带请求头信息
		token:'aaa'
	}
}).then(res=>{
	成功
}).catch((err)=>{
	失败
})
------------------------------------
axios.post('地址',{参数},{headers:{token:'tom'}}).then(res=>{

}).catch(err=>{

})
------------------------------------
axios({
	url:'',
	method:'',
	data:{
		post传参
	},
	params:{
		get传参
	},
	headers:{

	}
}).then(res=>{

})

4、
data参数是一个JSON.stringify()处理后的字符串，而不是一个JSON对象
查了半天，Request Payload这种数据一般用来上传文件
Axios向后端提交数据容易接收不到原因是传参方式是request payload,参数格式是json，而并非用的是form传参，所以在后台用接收form数据的方式接收参数就接收不到了。post表单请求提交时，使用的Content-Type是application/x-www-form-urlencoded，而使用原生AJAX的POST请求如果不指定请求头RequestHeader，默认使用的Content-Type是text/plain;charset=UTF-8。

解决办法：使用qs处理post数据
npm install qs --save
import qs from 'qs'
...
let postData=this.$qs.stringify(datas)
